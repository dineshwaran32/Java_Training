COLLECTION INTERFACE

boolean add(E e);
boolean addAll(Collection<? extends E> c);
boolean remove(Object o);
boolean removeAll(Collection<?> c);
void clear();
boolean retainAll(Collection<?> c);
boolean contains(Object o);
boolean containsAll(Collection<?> c);
boolean isEmpty();
int size();
Iterator<E> iterator();
Object[] toArray();
<T> T[] toArray(T[] a);



LIST INTERFACE

void add(int index, E element);
boolean addAll(int index, Collection c);
E get(int index);
E set(int index, E element);
E remove(int index);
int indexOf(Object o);
int lastIndexOf(Object o);
ListIterator listIterator();
ListIterator listIterator(int index);
List subList(int fromIndex, int toIndex);

ARRAYLIST INTERFACE

boolean add(E e);
void add(int index, E element);
boolean addAll(Collection c);
boolean addAll(int index, Collection c);
void clear();
Object clone();
boolean contains(Object o);
void ensureCapacity(int minCapacity);
E get(int index);
int indexOf(Object o);
boolean isEmpty();
Iterator iterator();
int lastIndexOf(Object o);
ListIterator listIterator();
ListIterator listIterator(int index);
E remove(int index);
boolean remove(Object o);
boolean removeAll(Collection<?> c);
boolean removeIf(Predicate<? super E> filter);
protected void removeRange(int fromIndex, int toIndex);
boolean retainAll(Collection<?> c);
E set(int index, E element);
int size();
void sort(Comparator<? super E> c);
List subList(int fromIndex, int toIndex);
Object[] toArray();
<T> T[] toArray(T[] a);
void trimToSize();


datastructure 
		- the way of retrieve , organize , manupuilate the data is called Data structure




LINKED LIST
